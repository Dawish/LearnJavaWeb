<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
       
    <bean id="user" class="spring.entity.User"></bean>
    
    <bean id="student" class="spring.entity.Student">
    	<constructor-arg name="name" value="DreamBoy"></constructor-arg>
	</bean>
    
    <bean id="teacher" class="spring.entity.Teacher">
    	<property name="name" value="Teacher Danxx"></property>
	</bean>
    
    <!-- 配置service和dao对象 -->
	<!-- 因为service依赖于dao，所以先进行dao对象的bean配置 -->
	<bean id="userDaoImpl" class="spring.dao.UserDaoImpl"></bean>
	
	<bean id="userService" class="spring.service.UserService">
	   	<!--
	   		注入dao对象
			name属性值为：service中的某一属性名称
	       	ref属性值为：被引用的对象对应的bean标签的id属性值	-->
	    <property name="userDao" ref="userDaoImpl"></property>
	</bean>
    
    
    <bean id="prop" class="spring.entity.PropertyDemo">
       <!-- 注入数组 -->
       <property name="arrs">
           <list>
               <value>Value 1 of Array</value>
               <value>Value 2 of Array</value>
               <value>Value 3 of Array</value>
           </list>
       </property>
       <!-- 注入List集合 -->
       <property name="list">
           <list>
               <value>Value 1 of List</value>
               <value>Value 2 of List</value>
               <value>Value 3 of List</value>
           </list>
       </property>
       <!-- 注入Map集合 -->
       <property name="map">
           <map>
               <entry key="key1" value="Value 1 of Map"></entry>
               <entry key="key2" value="Value 2 of Map"></entry>
               <entry key="key3" value="Value 3 of Map"></entry>
           </map>
       </property>
       <!-- 注入Properties -->
       <property name="properties">
           <props>
               <prop key="username">root</prop>
               <prop key="password">123456</prop>
           </props>
       </property>
   </bean>
   	
   	
   	  <!-- 构造方法方式属性注入 -->
   	 <bean id="car" class="spring.entity.Car">
   	 	<constructor-arg name="name" value="MyDxxCar"></constructor-arg>
   	 	<constructor-arg name="price" value="1200000"></constructor-arg>
   	 </bean>
    <!-- setter方法属性注入 -->
    <bean id="employee" class="spring.entity.Employee" >
        <!-- 通过property 注入setter方法属性 (属性名称， 由setter方法推理获得)-->
        <!-- 
            name 属性名称 （由setter方法获得）
            value 注入参数的值
            ref 引用另一个Bean元素的id
         -->
        <property name="id" value="100001" />
        <property name="name" value="张三" />
        <!-- 注入复杂对象 -->
        <property name="car" ref="car" />
    </bean>
    
    <!--使用p命名空间注入 -->
    <bean id="employeeP" class="spring.entity.Employee" 
        p:id="100002" p:name="李四" p:car-ref="car"/>
        
        
   <!--spEL使用 -->
    <bean id="valueBean" class="spring.entity.ValueBean" />
    <bean id="employee3" class="spring.entity.Employee" >
        <!-- 调用valueBean的getId -->
        <property name="id" value="#{valueBean.id}" />
  		<!--直接调用对象的方法 -->
        <property name="name" value="#{valueBean.pickName().toUpperCase()}" />
       <!--  #{car} 效果类似 ref  -->
        <property name="car" value="#{car}" />
    </bean> 
   	

</beans>